generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clanker {
  id               Int      @id
  created_at       DateTime
  tx_hash          String
  contract_address String   @unique // must be stored lowercased
  requestor_fid    Int
  name             String
  symbol           String
  img_url          String?
  pool_address     String
  cast_hash        String?
  type             String?
  page             Int // this is used for scraping. sometimes set to -1 on get style scrape.
  nsfw             Boolean  @default(false)

  i_mcap_usd      Float?
  i_volume_usd    Float? // Unused
  i_trades        Int?
  i_decimals      Int?
  i_price_usd     Float?
  i_rewards_usd   Float?
  i_cast          String?
  i_owner_address String?
  i_updated_at    DateTime?

  i_24h_volume        Float?
  i_30d_volume        Float?
  i_volume_updated_at DateTime?

  @@index([contract_address])
}

model TradeReferral {
  id              String @id @default(cuid())
  walletAddress   String
  contractAddress String
  numTrades       Int    @default(0)

  @@unique([walletAddress, contractAddress])
  @@index([walletAddress, contractAddress])
}

model ContestEntry {
  id           String        @id @default(cuid())
  created_at   DateTime
  ownerAddress String        @unique
  name         String
  symbol       String
  img_url      String?
  votes        ContestVote[]
}

model ContestVote {
  id      String       @id @default(cuid())
  address String       @unique
  entry   ContestEntry @relation(fields: [entryId], references: [id])
  entryId String
}
